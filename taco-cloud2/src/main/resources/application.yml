# 스프링 부트에 의해 자동 구성되는 빈들은 스프링 환경으로 부터 가져온 속성들을 사용해서 구성될 수 있다.
# 스프링 환경에서는 원천속성들을 가져와서 애플리케이션 컨텍스트의 빈이 사용할 수 있게 해준다.
# 구성 속성은 빈의 속성일 뿐이고, 스프링의 환경 추상화로부터 여러가지 구성을 받기 위해 설계되었다.
# @ConfigurationProperties 애노테이션을 통해 해당 빈의 속성들이 스프링 환경의 속성으로부터 주입될 수 있다.

# 스프링 프로파일 : 런타임 시에 활성화 되는 프로파일에 따라 서로 다른 빈, 구성클래스, 구성속성들이 적용 또는 무시되도록 한다.
# 시나리오 : 개발과 디버깅 목적으로 h2 사용 및 타코 클라우도 코드의 로깅수준을 debug 로 설정, 그러나 프로덕션 환경에선 외부의 mysql 사용 및 로깅수준 warn으로 설정
#logging:
#  level:
#    tacos: DEBUG
# 프로파일 특정 속성 정의를 하기 위한 방법중 하나는 프로덕션 환경의 속성들만 포함하는 또 다른 yml or properties 파일을 생성하는 것
# 파일 이름은 규칙을 따라야 한다. - application-[프로파일 이름].yml or properties
# ex) application-prod.yml

# yml 구성에서만 가능한 또 다른 방법으로 기본속성과 함께 프로파일 특정 속성을 application.yml 에 같이 지정할 수 있다.
# 하이푼(-) 3개를 사용하고 profiles 속성으로 적용할 수 있다. 
#logging:
#  level:
#    tacos: DEBUG
# ---
# spring:
#   profiles: prod
#   datasource:
#     url: ~
#     username: ~
#     password: ~
#logging:
#  level:
#    tacos: WARN

# spring.profiles.active 속성으로 해당 프로파일을 활성화 할 수 있다. (안좋은 방법)
# spring:
#   profiles:
#     active:
#     - prod

# 환경변수를 사용해서 활성화 하는것을 권장 (쉼표로 복수개 지정 가능)
# % export SPRING_PROFILES_ACTIVE=prod,audit,ha

taco:
  orders:
    pageSize: 10

spring:
  h2:
    console:
      enabled: true
        data:    rest:      base-path: /api

#  jpa:
#    show-sql: true
#    properties:
#      hibernate:
#        format_sql: true

# DB 관련 설정들
#  datasource:#    url: 
#    username: 
#    password: 
#    driver-class-name: 

#  datasource:#    hikari:      
#  datasource:#    schema:#      - 
#    data:#      - 

#  datasource:#    jndi-name: 

#server:#  port: 

# HTTPS 요청 처리를 위한 설정
#server:#  ssl:#    key-store: 
#    key-store-password: 
#    key-password: 

# LOG
#logging:
#  level:#    root: 
#    org.springframework.:#  file:#    path:
#    name: 

# 다른 속성의 값 가져오기 ${}
#greeting:
#  welcome: ${spring.application.name}
  